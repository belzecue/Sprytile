https://blenderartists.org/forum/showthread.php?377599-NEW!!-Python-BVH-Tree-for-ray-cast-and-collisions-and-snapping

http://stackoverflow.com/questions/5666222/3d-line-plane-intersection

https://blenderartists.org/forum/showthread.php?223152-Opengl-in-Blender-2-6

http://blender.stackexchange.com/questions/30444/create-an-interface-which-is-similar-to-the-material-list-box

https://www.blender.org/api/blender_python_api_2_70_5/bpy.types.UIList.html

https://www.blender.org/api/blender_python_api_2_76_1/gpu.offscreen.html

Find the user's actual undo/redo keymapping by
- go to the keyconfigs. wm.keyconfigs.user
- Looking under the 'Screen' keymap
- Finding 'ed.undo' and 'ed.redo'
bpy.context.window_manager.keyconfigs.user.keymaps['Screen'].keymap_items.find('ed.undo')

Screen keymap:
ed.undo, ed.redo
Mesh keymap:
mesh.select_all,
mesh.hide
mesh.reveal
view3d.move - Camera pan, to allow user to move tile palette

code from development_iskeyfree.py, for checking user keymaps
# wm = bpy.context.window_manager
#
# for context, keyboardmap in wm.keyconfigs.user.keymaps.items():
#       for myitem in keyboardmap.keymap_items:
#               print myitem.idname

Change the key handler in the modal to operate through KeyMapItem found by this way.
If the event matches, pass the event through

Code for reading specific keymaps, unused but good as reference for key take overs
        # # These keymaps are passed through blender
        # keymap_pass_through = {
        #     'Screen': {
        #         "ids": ['ed.undo', 'ed.redo']
        #     },
        #     'Mesh': {
        #         "ids": [
        #             'mesh.split',
        #             'mesh.select_all',
        #             'mesh.hide',
        #             'mesh.reveal',
        #             'mesh.edge_face_add',
        #             'mesh.knife_tool',
        #             'mesh.loopcut_slide',
        #             'view3d.edit_mesh_extrude_move_normal',
        #         ],
        #         "prop": [
        #             'VIEW3D_MT_edit_mesh_select_mode',
        #             'VIEW3D_MT_edit_mesh_delete',
        #             'VIEW3D_MT_edit_mesh_edges'
        #         ]
        #     },
        #     '3D View': {
        #         "ids": [
        #             'view3d.select_circle',
        #             'view3d.select_border',
        #             'transform.rotate'
        #         ],
        #         "prop": ['VIEW3D_MT_snap'],
        #         "toggle": ['tool_settings.use_snap']
        #     },
        #     'Object Non-modal': {
        #         "ids": ['object.mode_set']
        #     },
        #     'Window': {
        #         "ids": ['wm.search_menu']
        #     }
        # }
        # for keymap_id in keymap_pass_through:
        #     keymap = user_keymaps[keymap_id]
        #     if keymap is None:
        #         continue
        #     cmd_list = keymap_pass_through[keymap_id]
        #     for kmi in keymap.keymap_items.values():
        #         if "ids" in cmd_list:
        #             if kmi.idname in cmd_list["ids"]:
        #                 self.user_keys.append(kmi)
        #                 continue
        #         if "prop" in cmd_list:
        #             if kmi.properties is None:
        #                 continue
        #             if 'name' in kmi.properties:
        #                 if kmi.properties.name in cmd_list["prop"]:
        #                     self.user_keys.append(kmi)
        #         if "toggle" in cmd_list:
        #             if kmi.idname != "wm.context_toggle":
        #                 continue
        #             if kmi.properties is None:
        #                 continue
        #             if kmi.properties.data_path in cmd_list["toggle"]:
        #                 self.user_keys.append(kmi)